# Generated by Django 4.2.2 on 2023-07-04 14:49

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid
import wagtail.blocks
import wagtail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0083_workflowcontenttype'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique UUID. Auto generated on creation.', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, null=True, unique=True, verbose_name='City Name')),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='City Location (Lat, Lng)')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='DailyWeather',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issued_on', models.DateField(auto_now_add=True, null=True)),
                ('forecast_date', models.DateField(verbose_name='Forecast Date')),
                ('forecast_desc', wagtail.fields.RichTextField(verbose_name='Weather Forecast Description')),
                ('summary_date', models.DateField(verbose_name='Summary Date')),
                ('summary_desc', wagtail.fields.RichTextField(verbose_name='Weather Summary Description')),
                ('extreme_date', models.DateField(blank=True, null=True, verbose_name='Extreme Date')),
                ('extremes', wagtail.fields.StreamField([('extremes', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=True)), ('measurements', wagtail.blocks.StreamBlock([('measurements', wagtail.blocks.StructBlock([('station_name', wagtail.blocks.CharBlock(required=True)), ('extreme_value', wagtail.blocks.FloatBlock(required=True))]))]))]))], use_json_field=True)),
            ],
        ),
        migrations.CreateModel(
            name='ForecastSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enable_auto_forecast', models.BooleanField(default=True, verbose_name='Enable automated forecasts')),
                ('temp_units', models.CharField(choices=[('celsius', '°C'), ('fareinheit', '°F'), ('kelvin', 'K')], default='celsius', max_length=255, verbose_name='Temperature')),
                ('wind_units', models.CharField(choices=[('knots', 'knots'), ('km_p_hr', 'km/h'), ('mtr_p_s', 'm/s'), ('mile_p_hr', 'mph'), ('feet_p_s', 'ft/s')], default='km_p_hr', max_length=255, verbose_name='Wind')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Forecast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forecast_date', models.DateField(verbose_name='Forecasts Date')),
                ('max_temp', models.IntegerField(blank=True, verbose_name='Maximum Temperature')),
                ('min_temp', models.IntegerField(blank=True, verbose_name='Minimum Temperaure')),
                ('wind_direction', models.IntegerField(blank=True, null=True, verbose_name='Wind Direction')),
                ('wind_speed', models.IntegerField(blank=True, null=True, verbose_name='Wind Speed')),
                ('condition', models.CharField(choices=[('clearsky', 'Clear sky'), ('cloudy', 'Cloudy'), ('fair', 'Fair'), ('fog', 'Fog'), ('heavyrain', 'Heavy Rain'), ('heavyrainandthunder', 'Heavy Rain and Thunder'), ('heavyrainshowers', 'Heavy Rain Showers'), ('heavyrainshowersandthunder', 'Heavy Rain Showers and Thunder'), ('heavysleet', 'Heavy Sleet'), ('heavysleetandthunder', 'Heavy Sleet and Thunder'), ('heavysleetshowers', 'Heavy Sleet Showers'), ('heavysleetshowersandthunder', 'Heavy Sleet Showers and Thunder'), ('heavysnow', 'Heavy Snow'), ('heavysnowandthunder', 'Heavy Snow and Thunder'), ('heavysnowshowers', 'Heavy Snow Showers'), ('heavysnowshowersandthunder', 'Heavy Snow Showers and Thunder'), ('lightrain', 'Light Rain'), ('lightrainandthunder', 'Light Rain and Thunder'), ('lightrainshowers', 'Light Rain Showers'), ('lightrainshowersandthunder', 'Light Rain Showers and Thunder'), ('lightsleet', 'Light Sleet'), ('lightsleetandthunder', 'Light Sleet and Thunder'), ('lightsleetshowers', 'Light Sleet Showers'), ('lightsleetshowersandthunder', 'Light Sleet Showers and Thunder'), ('lightsnowshowersandthunder', 'Light Snow Showers and Thunder'), ('partlycloudy', 'Partly Cloudy'), ('rain', 'Rain'), ('rainandthunder', 'Rain and Thunder'), ('rainshowers', 'Rain showers'), ('rainshowersandthunder', 'Rain Showes and Thunder'), ('sleet', 'Sleet'), ('sleetandthunder', 'Sleet and Thunder'), ('sleetshowers', 'Sleet Showers'), ('sleetshowersandthunder', 'Sleet Showes and Thunder'), ('snow', 'Snow'), ('snowandthunder', 'Snow and Thunder'), ('snowshowers', 'Snow Showers'), ('snowshowersandthunder', 'Snow Showers and Thunder')], help_text='E.g Light Showers', max_length=255, null=True, verbose_name='General Weather Condition')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forecastmanager.city', verbose_name='City')),
            ],
            options={
                'verbose_name': 'Forecast',
                'verbose_name_plural': 'Forecasts',
            },
        ),
    ]
